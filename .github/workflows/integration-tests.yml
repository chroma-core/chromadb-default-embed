name: Integration Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  integration-tests:
    name: Test import compatibility
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
        module-type: ['commonjs', 'esm']

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Create test project directory
        run: mkdir -p integration-test

      - name: Set up test project
        working-directory: integration-test
        run: |
          # Initialize test project with the specified module type
          if [ "${{ matrix.module-type }}" == "commonjs" ]; then
            npm init -y
            npm pkg set type="commonjs"
          else
            npm init -y
            npm pkg set type="module"
          fi

      - name: Link package to test project
        run: |
          npm link
          cd integration-test
          npm link chromadb-default-embed

      - name: Create CommonJS test file
        if: matrix.module-type == 'commonjs'
        working-directory: integration-test
        run: |
          cat > test.cjs <<EOL
          const { DefaultEmbeddingFunction } = require('chromadb-default-embed');

          async function runTest() {
            try {
              const embedder = new DefaultEmbeddingFunction();
              const embeddings = await embedder.generate(["This is a test sentence"]);

              if (!Array.isArray(embeddings) || !Array.isArray(embeddings[0])) {
                console.error("Invalid embeddings format");
                process.exit(1);
              }

              console.log("Integration test passed - CommonJS");
              process.exit(0);
            } catch (error) {
              console.error("Integration test failed:", error);
              process.exit(1);
            }
          }

          runTest();
          EOL

      - name: Create ESM test file
        if: matrix.module-type == 'esm'
        working-directory: integration-test
        run: |
          cat > test.mjs <<EOL
          import { DefaultEmbeddingFunction } from 'chromadb-default-embed';

          async function runTest() {
            try {
              const embedder = new DefaultEmbeddingFunction();
              const embeddings = await embedder.generate(["This is a test sentence"]);

              if (!Array.isArray(embeddings) || !Array.isArray(embeddings[0])) {
                console.error("Invalid embeddings format");
                process.exit(1);
              }

              console.log("Integration test passed - ESM");
              process.exit(0);
            } catch (error) {
              console.error("Integration test failed:", error);
              process.exit(1);
            }
          }

          runTest();
          EOL

      - name: Run integration test
        working-directory: integration-test
        run: |
          if [ "${{ matrix.module-type }}" == "commonjs" ]; then
            node test.cjs
          else
            node test.mjs
          fi

  browser-integration:
    name: Test browser compatibility
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Create browser test directory
        run: mkdir -p browser-test

      - name: Set up browser test project
        working-directory: browser-test
        run: |
          npm init -y
          npm install --save puppeteer
          npm link ../

      - name: Create HTML test file
        working-directory: browser-test
        run: |
          cat > index.html <<EOL
          <!DOCTYPE html>
          <html>
          <head>
            <title>Browser Integration Test</title>
            <script type="module">
              import { DefaultEmbeddingFunction } from 'chromadb-default-embed';

              async function runTest() {
                try {
                  const embedder = new DefaultEmbeddingFunction();
                  const embeddings = await embedder.generate(["This is a test sentence"]);

                  if (!Array.isArray(embeddings) || !Array.isArray(embeddings[0])) {
                    document.body.innerHTML = '<div id="result">FAILED: Invalid embeddings format</div>';
                    return;
                  }

                  document.body.innerHTML = '<div id="result">PASSED</div>';
                } catch (error) {
                  document.body.innerHTML = '<div id="result">FAILED: ' + error.message + '</div>';
                }
              }

              window.onload = runTest;
            </script>
          </head>
          <body>
            <div id="result">Running test...</div>
          </body>
          </html>
          EOL

      - name: Create browser test runner
        working-directory: browser-test
        run: |
          cat > browser-test.js <<EOL
          const puppeteer = require('puppeteer');

          (async () => {
            const browser = await puppeteer.launch({
              headless: 'new',
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            const page = await browser.newPage();

            try {
              // Create a simple HTTP server to serve the test page
              const http = require('http');
              const fs = require('fs');
              const path = require('path');

              const server = http.createServer((req, res) => {
                const filePath = path.join(__dirname, 'index.html');
                const content = fs.readFileSync(filePath);
                res.writeHead(200, { 'Content-Type': 'text/html' });
                res.end(content);
              });

              server.listen(8080);

              // Navigate to the test page
              await page.goto('http://localhost:8080');

              // Wait for the test to complete
              await page.waitForFunction(() => {
                const result = document.getElementById('result');
                return result && result.innerText !== 'Running test...';
              }, { timeout: 30000 });

              // Get the test result
              const result = await page.evaluate(() => {
                return document.getElementById('result').innerText;
              });

              if (result.startsWith('PASSED')) {
                console.log('Browser integration test passed');
                process.exit(0);
              } else {
                console.error('Browser integration test failed:', result);
                process.exit(1);
              }
            } catch (error) {
              console.error('Error running browser test:', error);
              process.exit(1);
            } finally {
              await browser.close();
              server.close();
            }
          })();
          EOL

      - name: Run browser integration test
        working-directory: browser-test
        run: node browser-test.js